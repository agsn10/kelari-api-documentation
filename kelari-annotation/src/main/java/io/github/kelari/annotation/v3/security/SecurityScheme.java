package io.github.kelari.annotation.v3.security;

import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Inherited;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import io.github.kelari.annotation.v3.enums.SecuritySchemeIn;
import io.github.kelari.annotation.v3.enums.SecuritySchemeType;
import io.github.kelari.annotation.v3.extensions.Extensions;

/**
 * Defines a security scheme that can be used by the operations.
 *
 * <p>This annotation corresponds to the {@code Security Scheme Object} in the OpenAPI Specification.
 * It allows describing different types of security mechanisms such as HTTP Basic Authentication,
 * API keys, OAuth2 flows, and OpenID Connect Discovery.</p>
 *
 * <p>Multiple security schemes can be specified by using the {@link SecuritySchemes} container annotation.</p>
 *
 * <p><strong>Specification Reference:</strong></p>
 * <ul>
 *     <li><a href="https://spec.openapis.org/oas/v3.1.0#security-scheme-object">OpenAPI Specification v3.1.0 – Security Scheme Object</a></li>
 * </ul>
 *
 * <p><strong>Usage Example:</strong></p>
 * <pre>{@code
 * @SecurityScheme(
 *     name = "apiKeyAuth",
 *     type = SecuritySchemeType.APIKEY,
 *     in = SecuritySchemeIn.HEADER,
 *     paramName = "X-API-KEY"
 * )
 * }</pre>
 *
 * @author <a href="mailto:agsn10@hotmail.com">Antonio Neto</a> [<()>] – Initial implementation.
 * @since 1.0
 * @see SecuritySchemes
 * @see SecurityRequirement
 * @see OAuthFlows
 * @see <a href="https://spec.openapis.org/oas/v3.1.0#security-scheme-object">OpenAPI 3.1.0 – Security Scheme Object</a>
 * @copyright 2025 Kelari. All rights reserved.
 */
@Target(value={TYPE,ANNOTATION_TYPE})
@Retention(value=RUNTIME)
@Repeatable(value=SecuritySchemes.class)
@Inherited
public @interface SecurityScheme {

    /**
     * The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
     * @return String type.
     * */
    SecuritySchemeType type();
    /**
     * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes. Applies to http ("bearer") type.
     * @return String bearerFormat.
     * */
    String bearerFormat() default "";
    /**
     * A short description for security scheme. CommonMark syntax can be used for rich text representation.
     * @return String description.
     * */
    String description() default "";
    /**
     * The list of optional extensions.
     * @return An optional array of extensions.
     * */
    Extensions[] extensions() default {};
    /**
     * Required. An object containing configuration information for the flow types supported. Applies to oauth2 type.
     * @return OAuthFlows flows.
     * */
    OAuthFlows flows() default @OAuthFlows;
    /**
     * The location of the API key. Valid values are "query" or "header". Applies to apiKey type.
     * @return String in.
     * */
    SecuritySchemeIn in() default SecuritySchemeIn.DEFAULT;
    /**
     * The name identifying this security scheme.
     * @return String name.
     * */
    String name() default "";
    /**
     * Required. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. Applies to openIdConnect.
     * @return String openIdConnectUrl.
     * */
    String openIdConnectUrl() default "";
    /**
     * The name of the header or query parameter to be used. Applies to apiKey type. Maps to "name" property of Security Scheme (OpenAPI specification).
     * @return String paramName.
     * */
    String paramName() default "";
    /**
     * A reference to a SecurityScheme defined in components securitySchemes.
     * @return The reference.
     * */
    String ref() default "";
    /**
     * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC 7235. Applies to http type.
     * @return String scheme.
     * */
    String scheme() default "";

}